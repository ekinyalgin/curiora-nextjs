 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int       @default(2)
  ipAddress     String?
  lastLogin     DateTime?
  posts         Post[]
  comments      Comment[]
  media         Media[]
  commentVotes CommentVote[]
  postVotes    PostVote[]
  reports Report[] @relation("ReporterReports")
  settings          UserSettings?
  followedTags TagFollow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @db.Text
  users       User[]
}

model Language {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  isDefault Boolean  @default(false)
  tags      Tag[]
  categories Category[]
  posts     Post[]
  userSettings UserSettings[]
}

model Tag {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  slug             String      @unique
  description      String?     @db.Text
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  language_id      Int?
  language         Language?   @relation(fields: [language_id], references: [id])
  posts            Post[]
  featuredImageId  Int?
  featuredImage    Media?      @relation(fields: [featuredImageId], references: [id])
  followers        TagFollow[]
  followerCount    Int         @default(0)

  @@unique([name, language_id])
}

model Category {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  description    String?   @db.Text
  languageId     Int?
  language       Language? @relation(fields: [languageId], references: [id])
  parentId       Int?
  parent         Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children       Category[] @relation("CategoryToCategory")
  seoDescription String?   @db.Text
  seoTitle       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  posts           Post[]
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String
  slug            String    @unique
  content         String    @db.Text
  status          String    // 'published', 'draft', 'archived'
  type            String    // 'article', 'question'
  archivedAt      DateTime?
  userId          String   
  categoryId      Int
  createdAt       DateTime  @default(now())
  featuredImageId Int?
  featuredImage   Media?    @relation(fields: [featuredImageId], references: [id])
  languageId      Int
  lastActivityAt  DateTime  @updatedAt
  publishedAt     DateTime?
  seoTitle        String?
  seoDescription  String?   @db.Text
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  category        Category  @relation(fields: [categoryId], references: [id])
  language        Language  @relation(fields: [languageId], references: [id])
  comments        Comment[]
  tags            Tag[]     // Add this line
  votes      PostVote[]
  voteCount  PostVoteCount?
  commentCount Int @default(0)
  reports Report[]
  reportCount Int     @default(0)
}

enum Status {
  pending
  approved
  archived
}

model Comment {
  id               Int       @id @default(autoincrement())
  status           Status    @default(pending)
  archivedAt       DateTime?
  createdAt        DateTime  @default(now())
  commentText      String    @db.Text
  parentCommentId  Int?
  postId           Int
  updatedAt        DateTime  @updatedAt
  userId           String
  parentComment    Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  childComments    Comment[] @relation("CommentToComment")
  post             Post      @relation(fields: [postId], references: [id])
  user             User      @relation(fields: [userId], references: [id])
  votes            CommentVote[]
  voteCount        CommentVoteCount?
  isDeleted        Boolean   @default(false) 
  reports          Report[]
  reportCount      Int       @default(0)
}

model Media {
  id        Int      @id @default(autoincrement())
  fileName  String
  filePath  String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  posts Post[] // Bu satırı ekleyin
  tagsFeaturedIn   Tag[]
}

enum VoteType {
  upvote
  downvote
}

model CommentVote {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    String
  voteType  VoteType
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model CommentVoteCount {
  id         Int      @id @default(autoincrement())
  commentId  Int      @unique
  downVotes  Int      @default(0)
  upVotes    Int      @default(0)
  lastUpdated DateTime @updatedAt
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model PostVote {
  id       Int      @id @default(autoincrement())
  postId   Int
  userId   String
  voteType VoteType
  post     Post     @relation(fields: [postId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model PostVoteCount {
  id         Int      @id @default(autoincrement())
  postId     Int      @unique
  downVotes  Int      @default(0)
  upVotes    Int      @default(0)
  lastUpdated DateTime @updatedAt
  post       Post     @relation(fields: [postId], references: [id])
}

enum ReportCategory {
  SPAM
  HATE_SPEECH
  MISINFORMATION
  INAPPROPRIATE_LANGUAGE
  INAPPROPRIATE_CONTENT
  OTHER
}

model Report {
  id          String         @id @default(cuid())
  category    ReportCategory
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  reporterId  String
  reporter    User           @relation("ReporterReports", fields: [reporterId], references: [id])
  postId      Int?
  post        Post?          @relation(fields: [postId], references: [id])
  commentId   Int?
  comment     Comment?       @relation(fields: [commentId], references: [id])

  @@index([postId])
  @@index([commentId])
  @@index([reporterId])
}

// Add this model to your schema
model UserSettings {
  id                Int      @id @default(autoincrement())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  languageId        Int
  language          Language @relation(fields: [languageId], references: [id])
  themePreference   String   @default("light")
  bio               String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Yeni TagFollow modeli
model TagFollow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tagId     Int
  userId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([tagId, userId])
}
